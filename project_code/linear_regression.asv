% load tensor data
load('binnedTensor.mat')

%% fit linear regression model
leftStim = S.trials.visualStim_contrastLeft;
rightStim = S.trials.visualStim_contrastRight;

% predict the right contrast stimulus from the data
% for each individual neuron
nNeurons = size(binnedTensor,1);

accuracy_matrix = zeros(1,nNeurons);
accuracy_matrix_shuffled = zeros(1,nNeurons);

% use SVM
parfor i = 1:nNeurons
    % what do we want to predict with SVM
    y = rightStim;

    % which data to use
    neuron_data = binnedTensor(i,:,:);
    neuron_data = squeeze(neuron_data);
    neuron_data = neuron_data'; % flip so this is rows = trials and columns = binned spike times
    x = neuron_data;

    % set up cross validation
    cv = cvpartition(size(neuron_data, 1), 'HoldOut', 0.3); % 70% training, 30% testing
    trainIdx = training(cv);
    testIdx = test(cv);
    
    X_train = x(trainIdx, :);
    y_train = y(trainIdx);
    X_test = x(testIdx, :);
    y_test = y(testIdx);
    
    % Train SVM model
    svmModel = fitcecoc(X_train, y_train); % fits SVM with default linear kernel, one v one
    
    % Test the model
    predictions = predict(svmModel, X_test);
    
    % Evaluate performance
    accuracy = sum(predictions == y_test) / length(y_test) * 100;
    accuracy_matrix(i) = accuracy;

    % next, need to shuffle the labels and compare to shuffled accuracy
    yshuffled = y(randperm(length(y)))

    X_train = x(trainIdx, :);
    y_train = shuffledy(trainIdx);
    X_test = x(testIdx, :);
    y_test = shuffledy(testIdx);

    % Train SVM model
    svmModel = fitcecoc(X_train, y_train); % fits SVM with default linear kernel, one v one
    
    % Test the model
    predictions = predict(svmModel, X_test);
    
    % Evaluate performance
    accuracy = sum(predictions == y_test) / length(y_test) * 100;
    accuracy_matrix_shuffled(i) = accuracy;

end

figure()
histogram(accuracy_matrix)
hold on
histogram(accuracy_matrix_shuffled)
xline(length(unique(rightStim)))

%% predict neural activity based on behavioral data
% from neural activity predict across TIME to see when prediction is
% highest for the sound